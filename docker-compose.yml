version: '3.8'

services:
  # Бэкенд (Express + TypeScript)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "3000:3000"
#    volumes:
#      - ./backend:/usr/src/app
#      - ./backend/dist:/usr/src/app/dist
#      - ./backend/node_modules:/usr/src/app/node_modules
    env_file:
      - backend/.env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Фронтенд (React + TypeScript + Tailwind)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "5174:5173"
      - "80:80"
    volumes:
      - ./frontend:/usr/src/app
#      - ./frontend/node_modules:/usr/src/app/node_modules
      - /usr/src/app/node_modules
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000
    networks:
      - app-network

  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5433:5432"
    env_file:
      - backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis
  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network


  # Elasticsearch
  elasticsearch:
    image: elasticsearch:7.17.22
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g  # Ограничение памяти (по желанию)
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network


volumes:
  postgres_data:
  redis_data:
  backend_node_modules:
  frontend_node_modules:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge